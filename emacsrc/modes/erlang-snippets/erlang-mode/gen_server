#name : gen_server
# --
%% -*- erlang-indent-level: 2;indent-tabs-mode: nil -*-
%% ex: ts=2 sw=2 et
%%% @doc
%%%
-module(${1:`(file-name-nondirectory
              (file-name-sans-extension (or (buffer-file-name) (buffer-name))))`}).

%%
%% API
%%
-export([start_link/0]).

%%
%% Callbacks
%%
-export([init/1,
        , handle_call/3
        , handle_cast/2
        , handle_info/2
        , terminate/2
        , code_change/3]).

%%
%% Definitions
%%
-record(state, {}).

%%
%% Types
%%
-export_type([]).

%% ============================================================================
%% API
%% ============================================================================
-spec start_link() -> {ok, pid()}.
start_link() ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, []).

%% ============================================================================
%% Callbacks
%% ============================================================================

-spec init(Args :: term()) ->
                  {ok, State :: term()}
                  | {ok, State :: term(), timeout() | hibernate}
                  | {stop, Reason :: term()}
                  | ignore.
init(Args :: term()) ->
    {ok, #state{}}.

-spec handle_call(Request :: term(), From :: {pid(), Tag :: term()},
                  State :: term()) ->
                         {reply, Reply :: term(), NewState :: term()}
                         | {reply, Reply :: term()
                           , NewState :: term()
                           , timeout() | hibernate}
                         | {noreply, NewState :: term()}
                         | {noreply, NewState :: term(), timeout() | hibernate}
                         | {stop, Reason :: term(), Reply :: term(), NewState :: term()}
                         | {stop, Reason :: term(), NewState :: term()}.
handle_call(Request, State) ->
    {ok, #state{}}.

-spec handle_cast(Request :: term(), State :: term()) ->
                         {noreply, NewState :: term()}
                         | {noreply, NewState :: term(), timeout() | hibernate}
                         | {stop, Reason :: term(), NewState :: term()}.
handle_cast(Request, State) ->
    {noreply, #state{}}.

-spec handle_info(Info :: timeout | term(), State :: term()) ->
                         {noreply, NewState :: term()}
                         | {noreply, NewState :: term(), timeout() | hibernate}
                         | {stop, Reason :: term(), NewState :: term()}.
handle_info(Info, State) ->
    {noreply, #state{}}.

-spec terminate(Reason :: (normal | shutdown | {shutdown, term()} |
                               term()),
                    State :: term()) -> term().
terminate(Reason, State) ->
    ok.

-spec code_change(OldVsn :: (term() | {down, term()}), State :: term(),
                  Extra :: term()) ->
                         {ok, NewState :: term()}
                         | {error, Reason :: term()}.
code_change(OldVsn, Extra) ->
    {ok, #state{}}.

-spec format_status(Opt, StatusData) -> Status when
      Opt :: 'normal' | 'terminate',
      StatusData :: [PDict | State],
      PDict :: [{Key :: term(), Value :: term()}],
      State :: term(),
      Status :: term().
format_status(Opt, Statusdata) ->
    normal.

%%%===================================================================
%%% Test Functions
%%%===================================================================

-ifdef(TEST).
-include_lib("eunit/include/eunit.hrl").

-spec test() -> ok.


-endif.
